# Config file test template
#
# Parsing rules:
#	If not .conf abort
#	Should do a defaut no arguments is given
#	this script might be used as default_conf.conf
#	not sure what to do if some of the fields are invalid: abort or choose default?
#
#	# are comments
#	{} are blocks, only used to separate servers
#	directive are closed with ;
# 	var value;
#	var_list value, value, value;	

#	Can contain various server:
#	The first server for a host:port will be the default for this host:port
#	(meaningit will answer to all request that doesnâ€™t belong to an other server)
#
#	var value; is standard type
#	VAR="value" is for meta variable
#
#

server
{
	#server info
	listen 8080; #listening port
	host 127.0.0.1; # choosing host
	server_name webserv; #setting up a name, choose a default name is this line isn't present

	#client body size
	client_body_size 32; #???? no idea what it is yet

	#locations of root to map root -> == main directory where html is stored
	root /data/www/; #using root to map all requests to following directory

	errors /data/www/errors/;

	#SETUP ROUTES ???

		#list of accepted HTTP METHOD for the route ?????
		method GET, POST;

		#turn on off directory listing, yes or no
		directory_listing yes;

		#default_directory_answer_file ???
		default_directory_answer_file /data/default_directory_answer_file;

		#CGI STUFF???

		# basically a way to run run script as the specified extension wich is
		# given below
		#
		# We're given the path as PATH_INFO of it's location
		#
		# the cgi ill be executed by a fork() with the script to run as first
		# argument
		#	guess we should use PATH_INFO as directory to find the script
		#
		#


		# wikipedia says

		# As remarked above, the CGI specification defines how additional
		# information passed with the request is passed to the script. For instance, if
		# a slash and additional directory name(s) are appended to the URL immediately
		# after the name of the script (in this example, /with/additional/path), then
		# that path is stored in the PATH_INFO environment variable before
	    # the script is called. If parameters are sent to the script via an
		# HTTP GET request (a question mark appended to the URL, followed by param=value
		# pairs; in the example, ?and=a&query=string), then those parameters
		# are stored in the QUERY_STRING environment variable before the script is
		# called. If parameters are sent to the script via an HTTP POST request, they
		# are passed to the script's standard input. The script can then read these
		# environment variables or data from standard input and adapt to the Web browser'
		# s request.[7]


	#	CGI EXTENSION=".php", CGI_ROOT="/data/www/cgi-scripts/"; # format not validated
			#set extension type


			#full path
			;

		# meta_variable ? No idea where to set them
		# should it be here in config file of after with the env like struct
		# i think it's just before we fork
		#meta
#			AUTH_TYPE=""; #identification type if applicable
			# ?????

#			CONTENT_LENGHT=""; # size of input data if put or post method are used
			# if not specified if should be until EOF for us i guess

#			CONTENT_TYPE=""; # Internet media type of input data if put or post are used

#			GATEWAY_INTERFACE=""; # CGI/version

#			PATH_INFO=""; # path suffix apprended to URL after program name and a slash
			# -> basically name of the program like /cgi-bin/or CGI_ROOT/

#			PATH_TRANSLATED=""; # full path as supposed by server, if PATH_INFO is present
			# ???? guess it's CGI_ROOT + PATH_INFO

#			QUERY_STRING=""; #QUERY_STRING: the part of URL after ? character.
			# The query string may be composed of *name=value pairs
			# separated with ampersands (such as var1=val1&var2=val2...)
			# when used to submit form data transferred via GET method as
			# defined by HTML application/x-www-form-urlencoded.
			# used to past specific vaiables to script i guess

#			REMOTE_ADDR=""; # IP address of the client (decimal)

#			REMOTE_IDENT=""; # client Ident i guess

#			REMOTE_USER=""; # Used for cetrian AUTH_TYPE ????

#			REQUEST_METHOD=""; # name of HTTP METHOD -> GET or POST

#			REQUEST_URL=""; # the all URL i guess -> CGI_ROOT + PATH_INFO + QUERY_STRING + SCRIPT_NAME

#			SCRIPT_NAME=""; # relative path of program like /cgi-bin/script.cgi

#			SERVER_NAME=""; # host name of the server, like local host

#			SERVER_PORT=""; # TCP port (decimal) -> 8080

#			SERVER_PROTOCOL=""; # HTTP/VERSION -> HTTP/1.1

#			SERVER_SOFTWARE=""; # name version of HTTP server ->webserv/1.1

	#uploaded file rooting, yes, no:
	uploaded_files yes;
	uploaded_files_root /data/uploaded_files/;

}
